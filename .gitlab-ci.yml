image: cuda10.0-mpi-hdf5

# Is performed before the scripts in the stages step
before_script:
    - export OMP_PROC_BIND=close
    - export OMP_PLACES=cores
    - export OMP_NUM_THREADS=1
    - export CMAKE_VERSION=3.10.3
    - export CTEST_OUTPUT_ON_FAILURE=1
    - export J=$(( $(nproc --all) / 4  + 1 )) && echo Using ${J} cores during build
    - wget -qO- http://www.cmake.org/files/v${CMAKE_VERSION:0:4}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz | tar -xz
    - export PATH=${PWD}/cmake-${CMAKE_VERSION}-Linux-x86_64/bin:$PATH
  
variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - style
  - short

style-check:
  tags:
    - cpu
  stage: style
  script:
    - python ./tst/style/cpplint.py --counting=detailed --recursive src example tst
  allow_failure: true

parthenon-cuda-short:
  tags:
    - cuda
  stage: short
  script:
# mitigate UVM allocations on older multi-GPU systems
#    - export CUDA_LAUNCH_BLOCKING=1
#    - export CUDA_VISIBLE_DEVICES=0
    - mkdir build-cuda-debug
    - cd build-cuda-debug
    - cmake -DCMAKE_BUILD_TYPE=Debug -DHDF5_ROOT=/usr/local/hdf5/parallel
      -DKokkos_ENABLE_OPENMP=True -DKokkos_ARCH_WSM=True
      -DKokkos_ENABLE_CUDA=True -DKokkos_ARCH_PASCAL61=True
      -DMPIEXEC_PREFLAGS="--allow-run-as-root"
      ../ && make -j${J} && ctest -j${J} -LE 'performance|regression'
    - cd ..
# run regression tests with UVM until everything is on the device
    - mkdir build-cuda-debug-uvm
    - cd build-cuda-debug-uvm
    - cmake -DCMAKE_BUILD_TYPE=Debug -DHDF5_ROOT=/usr/local/hdf5/parallel
      -DKokkos_ENABLE_OPENMP=True -DKokkos_ARCH_WSM=True
      -DKokkos_ENABLE_CUDA=True -DKokkos_ARCH_PASCAL61=True
      -DMPIEXEC_PREFLAGS="--allow-run-as-root"
      -DCMAKE_CXX_COMPILER=${PWD}/../external/Kokkos/bin/nvcc_wrapper
      -DKokkos_ENABLE_CUDA_UVM=ON
      ../ && make -j${J} && ctest -j${J} -L regression
  artifacts:
    when: always
    expire_in: 3 days
    paths:
      - build-cuda-debug/CMakeFiles/CMakeOutput.log
      - build-cuda-debug-uvm/CMakeFiles/CMakeOutput.log

# run short suite on CPUs
parthenon-cpu-short:
  tags:
    - cpu
  stage: short
  script:
    - mkdir build-debug
    - cd build-debug
    - cmake -DCMAKE_BUILD_TYPE=Debug -DHDF5_ROOT=/usr/local/hdf5/parallel
      -DKokkos_ENABLE_OPENMP=True -DKokkos_ARCH_WSM=True
      -DMPIEXEC_PREFLAGS="--allow-run-as-root"
      ../ && make -j${J} && ctest -j${J} -LE performance
  artifacts:
    when: always
    expire_in: 3 days
    paths:
      - build-debug/CMakeFiles/CMakeOutput.log

parthenon-cuda-peformance:
  tags:
    - cuda
  stage: short
  script:
# mitigate UVM allocations on older multi-GPU systems
#    - export CUDA_LAUNCH_BLOCKING=1
#    - export CUDA_VISIBLE_DEVICES=0
    - mkdir build-cuda-perf
    - cd build-cuda-perf
    - cmake -DCMAKE_BUILD_TYPE=Release -DHDF5_ROOT=/usr/local/hdf5/parallel
      -DKokkos_ENABLE_OPENMP=True -DKokkos_ARCH_WSM=True
      -DKokkos_ENABLE_CUDA=True -DKokkos_ARCH_PASCAL61=True
      -DMPIEXEC_PREFLAGS="--allow-run-as-root"
      ../ && make -j${J} && ctest -L performance
  artifacts:
    when: always
    expire_in: 3 days
    paths:
      - build-cuda-perf/CMakeFiles/CMakeOutput.log

# run short suite on CPUs
parthenon-cpu-performance:
  tags:
    - cpu
  stage: short
  script:
    - mkdir build-perf
    - cd build-perf
    - cmake -DCMAKE_BUILD_TYPE=Release -DHDF5_ROOT=/usr/local/hdf5/parallel
      -DKokkos_ENABLE_OPENMP=True -DKokkos_ARCH_WSM=True
      -DMPIEXEC_PREFLAGS="--allow-run-as-root"
      ../ && make -j${J} && ctest -L performance
  artifacts:
    when: always
    expire_in: 3 days
    paths:
      - build-perf/CMakeFiles/CMakeOutput.log
